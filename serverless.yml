service: File-Fusion-Backend

provider:
  name: aws
  runtime: python3.10
  stage: dev
  region: eu-central-1
  memorySize: 128
  timeout: 15
  environment:
    USERS_TABLE:
      Ref: user
    MULTIMEDIA_METADATA_TABLE:
      Ref: multimediaMetadata
    MULTIMEDIA_BUCKET:
      Ref: multimediaCloudStorage

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        "Fn::GetAtt": [user, Arn]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        "Fn::GetAtt": [multimediaMetadata, Arn]

    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:PutObject
        - s3:ListBucket
        - s3:DeleteObject
      Resource:
        "Fn::GetAtt": [multimediaCloudStorage, Arn]

package:
  individually: true
  patterns:
    - '!**/**'
    - 'internal/model/**'

functions:
  uploadFile:
    handler: internal/multimedia/upload.upload_file
    package:
      include: 'internal/multimedia/**'
    events:
      - http:
          path: uploadFile/{username}
          request:
            parameters:
              paths:
                username: true
          method: post
          cors:
            origin: 'http://localhost:4200'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            name: MyAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              !Sub
              - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
              - UserPoolId:
                  Ref: CognitoUserPool
  helloWorld:
    handler: internal/user/hello_world.hello_world
    package:
      include: 'internal/user/**'
    events:
      - http:
          path: helloWorld
          method: get
          cors:
            origin: 'http://localhost:4200'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          authorizer:
            name: MyAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              !Sub
              - arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
              - UserPoolId:
                  Ref: CognitoUserPool


resources:
  Resources:
    multimediaMetadata:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: multimedia_metadata
        # Table Schema: attributes (name and type)
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        # Key Schema: which attribute is used as primary key (name and type)
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        # Additional configuration for simultaneous reads and writes
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    user:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: user
        # Table Schema: attributes (name and type)
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        # Key Schema: which attribute is used as primary key (name and type)
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        # Additional configuration for simultaneous reads and writes
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    multimediaCloudStorage:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: multimedia-cloud-storage

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: my-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: family_name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: address
            AttributeDataType: String
            Mutable: true
            Required: true

    CognitoPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
        CallbackURLs:
          - http://localhost:4200/
        LogoutURLs:
          - http://localhost:4200/
        SupportedIdentityProviders:
          - COGNITO
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthScopes:
          - openid
          - profile
          - aws.cognito.signin.user.admin
        AllowedOAuthFlowsUserPoolClient: true
        ReadAttributes:
          - email
          - name
          - family_name
          - address
        WriteAttributes:
          - email
          - name
          - family_name
          - address

    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId:
          Ref: CognitoUserPool
        Domain: cuki-kanjos-djoka
